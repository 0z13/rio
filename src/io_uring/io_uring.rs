#![allow(unused)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen */
/// then hand-tweaked by Tyler Neely :0
use std::sync::atomic::AtomicU32;

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(
    ::std::marker::PhantomData<T>,
    [T; 0],
);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(
            ::std::marker::PhantomData,
            [],
        )
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(
        &mut self,
        len: usize,
    ) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(
            self.as_mut_ptr(),
            len,
        )
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(
        &self,
        fmt: &mut ::std::fmt::Formatter<'_>,
    ) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const INR_OPEN_CUR: u32 = 1024;
pub const INR_OPEN_MAX: u32 = 4096;
pub const BLOCK_SIZE_BITS: u32 = 10;
pub const BLOCK_SIZE: u32 = 1024;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const SEEK_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const FILE_DEDUPE_RANGE_SAME: u32 = 0;
pub const FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
pub const NR_FILE: u32 = 8192;
pub const MS_RDONLY: u32 = 1;
pub const MS_NOSUID: u32 = 2;
pub const MS_NODEV: u32 = 4;
pub const MS_NOEXEC: u32 = 8;
pub const MS_SYNCHRONOUS: u32 = 16;
pub const MS_REMOUNT: u32 = 32;
pub const MS_MANDLOCK: u32 = 64;
pub const MS_DIRSYNC: u32 = 128;
pub const MS_NOATIME: u32 = 1024;
pub const MS_NODIRATIME: u32 = 2048;
pub const MS_BIND: u32 = 4096;
pub const MS_MOVE: u32 = 8192;
pub const MS_REC: u32 = 16384;
pub const MS_VERBOSE: u32 = 32768;
pub const MS_SILENT: u32 = 32768;
pub const MS_POSIXACL: u32 = 65536;
pub const MS_UNBINDABLE: u32 = 131072;
pub const MS_PRIVATE: u32 = 262144;
pub const MS_SLAVE: u32 = 524288;
pub const MS_SHARED: u32 = 1048576;
pub const MS_RELATIME: u32 = 2097152;
pub const MS_KERNMOUNT: u32 = 4194304;
pub const MS_I_VERSION: u32 = 8388608;
pub const MS_STRICTATIME: u32 = 16777216;
pub const MS_LAZYTIME: u32 = 33554432;
pub const MS_SUBMOUNT: u32 = 67108864;
pub const MS_NOREMOTELOCK: u32 = 134217728;
pub const MS_NOSEC: u32 = 268435456;
pub const MS_BORN: u32 = 536870912;
pub const MS_ACTIVE: u32 = 1073741824;
pub const MS_NOUSER: u32 = 2147483648;
pub const MS_RMT_MASK: u32 = 41943121;
pub const MS_MGC_VAL: u32 = 3236757504;
pub const MS_MGC_MSK: u32 = 4294901760;
pub const FS_XFLAG_REALTIME: u32 = 1;
pub const FS_XFLAG_PREALLOC: u32 = 2;
pub const FS_XFLAG_IMMUTABLE: u32 = 8;
pub const FS_XFLAG_APPEND: u32 = 16;
pub const FS_XFLAG_SYNC: u32 = 32;
pub const FS_XFLAG_NOATIME: u32 = 64;
pub const FS_XFLAG_NODUMP: u32 = 128;
pub const FS_XFLAG_RTINHERIT: u32 = 256;
pub const FS_XFLAG_PROJINHERIT: u32 = 512;
pub const FS_XFLAG_NOSYMLINKS: u32 = 1024;
pub const FS_XFLAG_EXTSIZE: u32 = 2048;
pub const FS_XFLAG_EXTSZINHERIT: u32 = 4096;
pub const FS_XFLAG_NODEFRAG: u32 = 8192;
pub const FS_XFLAG_FILESTREAM: u32 = 16384;
pub const FS_XFLAG_DAX: u32 = 32768;
pub const FS_XFLAG_COWEXTSIZE: u32 = 65536;
pub const FS_XFLAG_HASATTR: u32 = 2147483648;
pub const BMAP_IOCTL: u32 = 1;
pub const FS_KEY_DESCRIPTOR_SIZE: u32 = 8;
pub const FS_POLICY_FLAGS_PAD_4: u32 = 0;
pub const FS_POLICY_FLAGS_PAD_8: u32 = 1;
pub const FS_POLICY_FLAGS_PAD_16: u32 = 2;
pub const FS_POLICY_FLAGS_PAD_32: u32 = 3;
pub const FS_POLICY_FLAGS_PAD_MASK: u32 = 3;
pub const FS_POLICY_FLAGS_VALID: u32 = 3;
pub const FS_ENCRYPTION_MODE_INVALID: u32 = 0;
pub const FS_ENCRYPTION_MODE_AES_256_XTS: u32 = 1;
pub const FS_ENCRYPTION_MODE_AES_256_GCM: u32 = 2;
pub const FS_ENCRYPTION_MODE_AES_256_CBC: u32 = 3;
pub const FS_ENCRYPTION_MODE_AES_256_CTS: u32 = 4;
pub const FS_ENCRYPTION_MODE_AES_128_CBC: u32 = 5;
pub const FS_ENCRYPTION_MODE_AES_128_CTS: u32 = 6;
pub const FS_KEY_DESC_PREFIX: &'static [u8; 9usize] =
    b"fscrypt:\0";
pub const FS_KEY_DESC_PREFIX_SIZE: u32 = 8;
pub const FS_MAX_KEY_SIZE: u32 = 64;
pub const FS_SECRM_FL: u32 = 1;
pub const FS_UNRM_FL: u32 = 2;
pub const FS_COMPR_FL: u32 = 4;
pub const FS_SYNC_FL: u32 = 8;
pub const FS_IMMUTABLE_FL: u32 = 16;
pub const FS_APPEND_FL: u32 = 32;
pub const FS_NODUMP_FL: u32 = 64;
pub const FS_NOATIME_FL: u32 = 128;
pub const FS_DIRTY_FL: u32 = 256;
pub const FS_COMPRBLK_FL: u32 = 512;
pub const FS_NOCOMP_FL: u32 = 1024;
pub const FS_ENCRYPT_FL: u32 = 2048;
pub const FS_BTREE_FL: u32 = 4096;
pub const FS_INDEX_FL: u32 = 4096;
pub const FS_IMAGIC_FL: u32 = 8192;
pub const FS_JOURNAL_DATA_FL: u32 = 16384;
pub const FS_NOTAIL_FL: u32 = 32768;
pub const FS_DIRSYNC_FL: u32 = 65536;
pub const FS_TOPDIR_FL: u32 = 131072;
pub const FS_HUGE_FILE_FL: u32 = 262144;
pub const FS_EXTENT_FL: u32 = 524288;
pub const FS_EA_INODE_FL: u32 = 2097152;
pub const FS_EOFBLOCKS_FL: u32 = 4194304;
pub const FS_NOCOW_FL: u32 = 8388608;
pub const FS_INLINE_DATA_FL: u32 = 268435456;
pub const FS_PROJINHERIT_FL: u32 = 536870912;
pub const FS_RESERVED_FL: u32 = 2147483648;
pub const FS_FL_USER_VISIBLE: u32 = 253951;
pub const FS_FL_USER_MODIFIABLE: u32 = 229631;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
pub const IOSQE_FIXED_FILE: u32 = 1;
pub const IOSQE_IO_DRAIN: u32 = 2;
pub const IOSQE_IO_LINK: u32 = 4;
pub const IOSQE_IO_HARDLINK: u32 = 8;
pub const IOSQE_ASYNC: u32 = 16;
pub const IORING_SETUP_IOPOLL: u32 = 1;
pub const IORING_SETUP_SQPOLL: u32 = 2;
pub const IORING_SETUP_SQ_AFF: u32 = 4;
pub const IORING_SETUP_CQSIZE: u32 = 8;
pub const IORING_FSYNC_DATASYNC: u32 = 1;
pub const IORING_TIMEOUT_ABS: u32 = 1;
pub const IORING_OFF_SQ_RING: u32 = 0;
pub const IORING_OFF_CQ_RING: u32 = 134217728;
pub const IORING_OFF_SQES: u32 = 268435456;
pub const IORING_SQ_NEED_WAKEUP: u32 = 1;
pub const IORING_ENTER_GETEVENTS: u32 = 1;
pub const IORING_ENTER_SQ_WAKEUP: u32 = 2;
pub const IORING_FEAT_SINGLE_MMAP: u32 = 1;
pub const IORING_FEAT_NODROP: u32 = 2;
pub const IORING_FEAT_SUBMIT_STABLE: u32 = 4;
pub const IORING_REGISTER_BUFFERS: u32 = 0;
pub const IORING_UNREGISTER_BUFFERS: u32 = 1;
pub const IORING_REGISTER_FILES: u32 = 2;
pub const IORING_UNREGISTER_FILES: u32 = 3;
pub const IORING_REGISTER_EVENTFD: u32 = 4;
pub const IORING_UNREGISTER_EVENTFD: u32 = 5;
pub const IORING_REGISTER_FILES_UPDATE: u32 = 6;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [libc::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_fd_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_fd_set>()))
                .fds_bits as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: libc::c_int),
>;
pub type __kernel_key_t = libc::c_int;
pub type __kernel_mqd_t = libc::c_int;
pub type __kernel_old_uid_t = libc::c_ushort;
pub type __kernel_old_gid_t = libc::c_ushort;
pub type __kernel_old_dev_t = libc::c_ulong;
pub type __kernel_long_t = libc::c_long;
pub type __kernel_ulong_t = libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = libc::c_uint;
pub type __kernel_pid_t = libc::c_int;
pub type __kernel_ipc_pid_t = libc::c_int;
pub type __kernel_uid_t = libc::c_uint;
pub type __kernel_gid_t = libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = libc::c_int;
pub type __kernel_uid32_t = libc::c_uint;
pub type __kernel_gid32_t = libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [libc::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_fsid_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_fsid_t>())).val
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = libc::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = libc::c_int;
pub type __kernel_clockid_t = libc::c_int;
pub type __kernel_caddr_t = *mut libc::c_char;
pub type __kernel_uid16_t = libc::c_ushort;
pub type __kernel_gid16_t = libc::c_ushort;
pub type __le16 = u16;
pub type __be16 = u16;
pub type __le32 = u32;
pub type __be32 = u32;
pub type __le64 = u64;
pub type __be64 = u64;
pub type __sum16 = u16;
pub type __wsum = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_clone_range {
    pub src_fd: i64,
    pub src_offset: u64,
    pub src_length: u64,
    pub dest_offset: u64,
}
#[test]
fn bindgen_test_layout_file_clone_range() {
    assert_eq!(
        ::std::mem::size_of::<file_clone_range>(),
        32usize,
        concat!("Size of: ", stringify!(file_clone_range))
    );
    assert_eq!(
        ::std::mem::align_of::<file_clone_range>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(file_clone_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_clone_range>()))
                .src_fd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(src_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_clone_range>()))
                .src_offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(src_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_clone_range>()))
                .src_length as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(src_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_clone_range>()))
                .dest_offset as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_clone_range),
            "::",
            stringify!(dest_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstrim_range {
    pub start: u64,
    pub len: u64,
    pub minlen: u64,
}
#[test]
fn bindgen_test_layout_fstrim_range() {
    assert_eq!(
        ::std::mem::size_of::<fstrim_range>(),
        24usize,
        concat!("Size of: ", stringify!(fstrim_range))
    );
    assert_eq!(
        ::std::mem::align_of::<fstrim_range>(),
        8usize,
        concat!("Alignment of ", stringify!(fstrim_range))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstrim_range>())).start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstrim_range),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstrim_range>())).len
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstrim_range),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstrim_range>())).minlen
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstrim_range),
            "::",
            stringify!(minlen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_dedupe_range_info {
    pub dest_fd: i64,
    pub dest_offset: u64,
    pub bytes_deduped: u64,
    pub status: i32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_file_dedupe_range_info() {
    assert_eq!(
        ::std::mem::size_of::<file_dedupe_range_info>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(file_dedupe_range_info)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<file_dedupe_range_info>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(file_dedupe_range_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range_info>(
            )))
            .dest_fd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(dest_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range_info>(
            )))
            .dest_offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(dest_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range_info>(
            )))
            .bytes_deduped as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(bytes_deduped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range_info>(
            )))
            .status as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range_info>(
            )))
            .reserved as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct file_dedupe_range {
    pub src_offset: u64,
    pub src_length: u64,
    pub dest_count: u16,
    pub reserved1: u16,
    pub reserved2: u32,
    pub info:
        __IncompleteArrayField<file_dedupe_range_info>,
}
#[test]
fn bindgen_test_layout_file_dedupe_range() {
    assert_eq!(
        ::std::mem::size_of::<file_dedupe_range>(),
        24usize,
        concat!("Size of: ", stringify!(file_dedupe_range))
    );
    assert_eq!(
        ::std::mem::align_of::<file_dedupe_range>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(file_dedupe_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range>()))
                .src_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(src_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range>()))
                .src_length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(src_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range>()))
                .dest_count as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(dest_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range>()))
                .reserved1 as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range>()))
                .reserved2 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<file_dedupe_range>()))
                .info as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_dedupe_range),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct files_stat_struct {
    pub nr_files: libc::c_ulong,
    pub nr_free_files: libc::c_ulong,
    pub max_files: libc::c_ulong,
}
#[test]
fn bindgen_test_layout_files_stat_struct() {
    assert_eq!(
        ::std::mem::size_of::<files_stat_struct>(),
        24usize,
        concat!("Size of: ", stringify!(files_stat_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<files_stat_struct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(files_stat_struct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<files_stat_struct>()))
                .nr_files as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(files_stat_struct),
            "::",
            stringify!(nr_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<files_stat_struct>()))
                .nr_free_files as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(files_stat_struct),
            "::",
            stringify!(nr_free_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<files_stat_struct>()))
                .max_files as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(files_stat_struct),
            "::",
            stringify!(max_files)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inodes_stat_t {
    pub nr_inodes: libc::c_long,
    pub nr_unused: libc::c_long,
    pub dummy: [libc::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_inodes_stat_t() {
    assert_eq!(
        ::std::mem::size_of::<inodes_stat_t>(),
        56usize,
        concat!("Size of: ", stringify!(inodes_stat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<inodes_stat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(inodes_stat_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inodes_stat_t>()))
                .nr_inodes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inodes_stat_t),
            "::",
            stringify!(nr_inodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inodes_stat_t>()))
                .nr_unused as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inodes_stat_t),
            "::",
            stringify!(nr_unused)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inodes_stat_t>())).dummy
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(inodes_stat_t),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsxattr {
    pub fsx_xflags: u32,
    pub fsx_extsize: u32,
    pub fsx_nextents: u32,
    pub fsx_projid: u32,
    pub fsx_cowextsize: u32,
    pub fsx_pad: [libc::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_fsxattr() {
    assert_eq!(
        ::std::mem::size_of::<fsxattr>(),
        28usize,
        concat!("Size of: ", stringify!(fsxattr))
    );
    assert_eq!(
        ::std::mem::align_of::<fsxattr>(),
        4usize,
        concat!("Alignment of ", stringify!(fsxattr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsxattr>())).fsx_xflags
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_xflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsxattr>())).fsx_extsize
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_extsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsxattr>())).fsx_nextents
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_nextents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsxattr>())).fsx_projid
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_projid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsxattr>()))
                .fsx_cowextsize as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_cowextsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsxattr>())).fsx_pad
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fsxattr),
            "::",
            stringify!(fsx_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_policy {
    pub version: u8,
    pub contents_encryption_mode: u8,
    pub filenames_encryption_mode: u8,
    pub flags: u8,
    pub master_key_descriptor: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_fscrypt_policy() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_policy>(),
        12usize,
        concat!("Size of: ", stringify!(fscrypt_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_policy>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(fscrypt_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy>()))
                .version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy>()))
                .contents_encryption_mode
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy),
            "::",
            stringify!(contents_encryption_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy>()))
                .filenames_encryption_mode
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy),
            "::",
            stringify!(filenames_encryption_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy>())).flags
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_policy>()))
                .master_key_descriptor
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_policy),
            "::",
            stringify!(master_key_descriptor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_key {
    pub mode: u32,
    pub raw: [u8; 64usize],
    pub size: u32,
}
#[test]
fn bindgen_test_layout_fscrypt_key() {
    assert_eq!(
        ::std::mem::size_of::<fscrypt_key>(),
        72usize,
        concat!("Size of: ", stringify!(fscrypt_key))
    );
    assert_eq!(
        ::std::mem::align_of::<fscrypt_key>(),
        4usize,
        concat!("Alignment of ", stringify!(fscrypt_key))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_key>())).mode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_key>())).raw
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fscrypt_key>())).size
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fscrypt_key),
            "::",
            stringify!(size)
        )
    );
}
pub type __kernel_rwf_t = libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Sqe {
    pub opcode: u8,
    pub flags: u8,
    pub ioprio: u16,
    pub fd: i32,
    pub __bindgen_anon_1: Sqe__bindgen_ty_1,
    pub addr: u64,
    pub len: u32,
    pub __bindgen_anon_2: Sqe__bindgen_ty_2,
    pub user_data: u64,
    pub __bindgen_anon_3: Sqe__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Sqe__bindgen_ty_1 {
    pub off: u64,
    pub addr2: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Sqe__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Sqe__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Sqe__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Sqe__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Sqe__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_1>()))
                .off as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_1),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_1>()))
                .addr2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_1),
            "::",
            stringify!(addr2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Sqe__bindgen_ty_2 {
    pub rw_flags: __kernel_rwf_t,
    pub fsync_flags: u32,
    pub poll_events: u16,
    pub sync_range_flags: u32,
    pub msg_flags: u32,
    pub timeout_flags: u32,
    pub accept_flags: u32,
    pub cancel_flags: u32,
    pub open_flags: u32,
    pub statx_flags: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_Sqe__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Sqe__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(Sqe__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Sqe__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Sqe__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .rw_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(rw_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .fsync_flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(fsync_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .poll_events as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(poll_events)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .sync_range_flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(sync_range_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .msg_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(msg_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .timeout_flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(timeout_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .accept_flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(accept_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .cancel_flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(cancel_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .open_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(open_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_2>()))
                .statx_flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_2),
            "::",
            stringify!(statx_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Sqe__bindgen_ty_3 {
    pub buf_index: u16,
    pub __pad2: [u64; 3usize],
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_Sqe__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<Sqe__bindgen_ty_3>(),
        24usize,
        concat!("Size of: ", stringify!(Sqe__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<Sqe__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Sqe__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_3>()))
                .buf_index as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_3),
            "::",
            stringify!(buf_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe__bindgen_ty_3>()))
                .__pad2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe__bindgen_ty_3),
            "::",
            stringify!(__pad2)
        )
    );
}
#[test]
fn bindgen_test_layout_Sqe() {
    assert_eq!(
        ::std::mem::size_of::<Sqe>(),
        64usize,
        concat!("Size of: ", stringify!(Sqe))
    );
    assert_eq!(
        ::std::mem::align_of::<Sqe>(),
        8usize,
        concat!("Alignment of ", stringify!(Sqe))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe>())).opcode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe>())).flags
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe>())).ioprio
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe),
            "::",
            stringify!(ioprio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe>())).fd as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe>())).addr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe>())).len as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sqe>())).user_data
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Sqe),
            "::",
            stringify!(user_data)
        )
    );
}
pub const IORING_OP_NOP: _bindgen_ty_1 = 0;
pub const IORING_OP_READV: _bindgen_ty_1 = 1;
pub const IORING_OP_WRITEV: _bindgen_ty_1 = 2;
pub const IORING_OP_FSYNC: _bindgen_ty_1 = 3;
pub const IORING_OP_READ_FIXED: _bindgen_ty_1 = 4;
pub const IORING_OP_WRITE_FIXED: _bindgen_ty_1 = 5;
pub const IORING_OP_POLL_ADD: _bindgen_ty_1 = 6;
pub const IORING_OP_POLL_REMOVE: _bindgen_ty_1 = 7;
pub const IORING_OP_SYNC_FILE_RANGE: _bindgen_ty_1 = 8;
pub const IORING_OP_SENDMSG: _bindgen_ty_1 = 9;
pub const IORING_OP_RECVMSG: _bindgen_ty_1 = 10;
pub const IORING_OP_TIMEOUT: _bindgen_ty_1 = 11;
pub const IORING_OP_TIMEOUT_REMOVE: _bindgen_ty_1 = 12;
pub const IORING_OP_ACCEPT: _bindgen_ty_1 = 13;
pub const IORING_OP_ASYNC_CANCEL: _bindgen_ty_1 = 14;
pub const IORING_OP_LINK_TIMEOUT: _bindgen_ty_1 = 15;
pub const IORING_OP_CONNECT: _bindgen_ty_1 = 16;
pub const IORING_OP_FALLOCATE: _bindgen_ty_1 = 17;
pub const IORING_OP_OPENAT: _bindgen_ty_1 = 18;
pub const IORING_OP_CLOSE: _bindgen_ty_1 = 19;
pub const IORING_OP_FILES_UPDATE: _bindgen_ty_1 = 20;
pub const IORING_OP_STATX: _bindgen_ty_1 = 21;
pub const IORING_OP_LAST: _bindgen_ty_1 = 22;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cqe {
    pub user_data: u64,
    pub res: i32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_Cqe() {
    assert_eq!(
        ::std::mem::size_of::<Cqe>(),
        16usize,
        concat!("Size of: ", stringify!(Cqe))
    );
    assert_eq!(
        ::std::mem::align_of::<Cqe>(),
        8usize,
        concat!("Alignment of ", stringify!(Cqe))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cqe>())).user_data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Cqe),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cqe>())).res as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Cqe),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cqe>())).flags
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Cqe),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Default, Debug, Copy, Clone)]
pub struct SqringOffsets {
    pub head: u32,
    pub tail: u32,
    pub ring_mask: u32,
    pub ring_entries: u32,
    pub flags: u32,
    pub dropped: u32,
    pub array: u32,
    pub resv1: u32,
    pub resv2: u64,
}
#[test]
fn bindgen_test_layout_SqringOffsets() {
    assert_eq!(
        ::std::mem::size_of::<SqringOffsets>(),
        40usize,
        concat!("Size of: ", stringify!(SqringOffsets))
    );
    assert_eq!(
        ::std::mem::align_of::<SqringOffsets>(),
        8usize,
        concat!("Alignment of ", stringify!(SqringOffsets))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>())).head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>())).tail
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>()))
                .ring_mask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(ring_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>()))
                .ring_entries as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(ring_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>())).flags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>()))
                .dropped as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(dropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>())).array
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>())).resv1
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(resv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SqringOffsets>())).resv2
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SqringOffsets),
            "::",
            stringify!(resv2)
        )
    );
}
#[repr(C)]
#[derive(Default, Debug, Copy, Clone)]
pub struct CqringOffsets {
    pub head: u32,
    pub tail: u32,
    pub ring_mask: u32,
    pub ring_entries: u32,
    pub overflow: u32,
    pub cqes: u32,
    pub resv: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_CqringOffsets() {
    assert_eq!(
        ::std::mem::size_of::<CqringOffsets>(),
        40usize,
        concat!("Size of: ", stringify!(CqringOffsets))
    );
    assert_eq!(
        ::std::mem::align_of::<CqringOffsets>(),
        8usize,
        concat!("Alignment of ", stringify!(CqringOffsets))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CqringOffsets>())).head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CqringOffsets),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CqringOffsets>())).tail
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CqringOffsets),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CqringOffsets>()))
                .ring_mask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CqringOffsets),
            "::",
            stringify!(ring_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CqringOffsets>()))
                .ring_entries as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CqringOffsets),
            "::",
            stringify!(ring_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CqringOffsets>()))
                .overflow as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CqringOffsets),
            "::",
            stringify!(overflow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CqringOffsets>())).cqes
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CqringOffsets),
            "::",
            stringify!(cqes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CqringOffsets>())).resv
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CqringOffsets),
            "::",
            stringify!(resv)
        )
    );
}
#[repr(C)]
#[derive(Default, Debug, Copy, Clone)]
pub struct Params {
    pub sq_entries: u32,
    pub cq_entries: u32,
    pub flags: u32,
    pub sq_thread_cpu: u32,
    pub sq_thread_idle: u32,
    pub features: u32,
    pub resv: [u32; 4usize],
    pub sq_off: SqringOffsets,
    pub cq_off: CqringOffsets,
}
#[test]
fn bindgen_test_layout_Params() {
    assert_eq!(
        ::std::mem::size_of::<Params>(),
        120usize,
        concat!("Size of: ", stringify!(Params))
    );
    assert_eq!(
        ::std::mem::align_of::<Params>(),
        8usize,
        concat!("Alignment of ", stringify!(Params))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).sq_entries
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(sq_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).cq_entries
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(cq_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).flags
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).sq_thread_cpu
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(sq_thread_cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>()))
                .sq_thread_idle as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(sq_thread_idle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).features
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).resv
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).sq_off
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(sq_off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Params>())).cq_off
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Params),
            "::",
            stringify!(cq_off)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_files_update {
    pub offset: u32,
    pub fds: *mut i32,
}
#[test]
fn bindgen_test_layout_io_uring_files_update() {
    assert_eq!(
        ::std::mem::size_of::<io_uring_files_update>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_files_update)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_files_update>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_files_update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_uring_files_update>(
            )))
            .offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_files_update),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_uring_files_update>(
            )))
            .fds as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_files_update),
            "::",
            stringify!(fds)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Uring {
    pub sq: Sq,
    pub cq: Cq,
    pub flags: libc::c_uint,
    pub ring_fd: libc::c_int,
}
#[test]
fn bindgen_test_layout_io_uring() {
    assert_eq!(
        ::std::mem::size_of::<Uring>(),
        160usize,
        concat!("Size of: ", stringify!(Uring))
    );
    assert_eq!(
        ::std::mem::align_of::<Uring>(),
        8usize,
        concat!("Alignment of ", stringify!(Uring))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Uring>())).sq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Uring),
            "::",
            stringify!(sq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Uring>())).cq as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Uring),
            "::",
            stringify!(cq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Uring>())).flags
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Uring),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Uring>())).ring_fd
                as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Uring),
            "::",
            stringify!(ring_fd)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sq {
    pub khead: *mut libc::c_uint,
    pub ktail: *mut AtomicU32,
    pub kring_mask: *mut libc::c_uint,
    pub kring_entries: *mut libc::c_uint,
    pub kflags: *mut libc::c_uint,
    pub kdropped: *mut libc::c_uint,
    pub array: *mut libc::c_uint,
    pub sqes: *mut Sqe,
    pub sqe_head: libc::c_uint,
    pub sqe_tail: libc::c_uint,
    pub ring_sz: usize,
    pub ring_ptr: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_Sq() {
    assert_eq!(
        ::std::mem::size_of::<Sq>(),
        88usize,
        concat!("Size of: ", stringify!(Sq))
    );
    assert_eq!(
        ::std::mem::align_of::<Sq>(),
        8usize,
        concat!("Alignment of ", stringify!(Sq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).khead as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(khead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).ktail as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(ktail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).kring_mask
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(kring_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).kring_entries
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(kring_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).kflags
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(kflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).kdropped
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(kdropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).array as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).sqes as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(sqes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).sqe_head
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(sqe_head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).sqe_tail
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(sqe_tail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).ring_sz
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(ring_sz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Sq>())).ring_ptr
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Sq),
            "::",
            stringify!(ring_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cq {
    pub khead: *mut libc::c_uint,
    pub ktail: *mut AtomicU32,
    pub kring_mask: *mut libc::c_uint,
    pub kring_entries: *mut libc::c_uint,
    pub koverflow: *mut libc::c_uint,
    pub cqes: *mut Cqe,
    pub ring_sz: usize,
    pub ring_ptr: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_Cq() {
    assert_eq!(
        ::std::mem::size_of::<Cq>(),
        64usize,
        concat!("Size of: ", stringify!(Cq))
    );
    assert_eq!(
        ::std::mem::align_of::<Cq>(),
        8usize,
        concat!("Alignment of ", stringify!(Cq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).khead as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(khead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).ktail as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(ktail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).kring_mask
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(kring_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).kring_entries
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(kring_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).koverflow
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(koverflow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).cqes as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(cqes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).ring_sz
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(ring_sz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Cq>())).ring_ptr
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Cq),
            "::",
            stringify!(ring_ptr)
        )
    );
}
